daytime_eeg$color <- as.factor(daytime_eeg$color)
###################################################################################
###Testing the reliabilty of data
sum_data_percent_outlier1 <- aggregate(percent_used ~ subject , data = daytime_eeg, FUN = mean)
sum_data_percent_outlier1_sd <- aggregate(percent_used ~ subject , data = daytime_eeg, FUN = sd)
sum_data_percent_outlier1$outlier1_upper <- sum_data_percent_outlier1$percent_used + (sum_data_percent_outlier1_sd$percent_used*2)
sum_data_percent_outlier1$outlier1_lower <- sum_data_percent_outlier1$percent_used - (sum_data_percent_outlier1_sd$percent_used*2)
View(daytime_eeg)
daytime_eeg$sub_sess <- paste(daytime_eeg$subject, daytime_eeg$session, sep = "_")
sum_data_percent_outlier2 <- aggregate(percent_used ~ sub_sess , data = daytime_eeg, FUN = mean)
sum_data_percent_outlier2_sd <- aggregate(percent_used ~ sub_sess , data = daytime_eeg, FUN = sd)
sum_data_percent_outlier2$outlier2_upper <- sum_data_percent_outlier2$percent_used + (sum_data_percent_outlier2_sd$percent_used*2)
sum_data_percent_outlier2$outlier2_lower <- sum_data_percent_outlier2$percent_used - (sum_data_percent_outlier2_sd$percent_used*2)
sum_data_percent$percent_used
daytime_eeg2 <- subset(daytime_eeg, !is.na(ValueNorm1))
sum_data_percent <- aggregate(percent_used ~ subject + color + session + light_level + trial + session + date  , data = daytime_eeg, FUN = mean)
sum_data_percent$outlier1_upper <- sum_data_percent_outlier1[match(sum_data_percent$subject, sum_data_percent_outlier1$subject),]$outlier1_upper
sum_data_percent$outlier1_lower <- sum_data_percent_outlier1[match(sum_data_percent$subject, sum_data_percent_outlier1$subject),]$outlier1_lower
sum_data_percent$outlier1 <- ifelse(sum_data_percent$percent_used > sum_data_percent$outlier1_upper | sum_data_percent$percent_used < sum_data_percent$outlier1_lower, TRUE, FALSE )
sum_data_percent$outlier2_upper <- sum_data_percent_outlier2[match(sum_data_percent$subject, sum_data_percent_outlier2$subject),]$outlier2_upper
sum_data_percent$outlier2_lower <- sum_data_percent_outlier2[match(sum_data_percent$subject, sum_data_percent_outlier2$subject),]$outlier2_lower
sum_data_percent$outlier2 <- ifelse(sum_data_percent$percent_used > sum_data_percent$outlier2_upper | sum_data_percent$percent_used < sum_data_percent$outlier2_lower, TRUE, FALSE )
View(sum_data_percent)
sum_data_percent$outlier2_upper <- sum_data_percent_outlier2[match(sum_data_percent$sub_sess, sum_data_percent_outlier2$sub_sess),]$outlier2_upper
sum_data_percent$outlier2_lower <- sum_data_percent_outlier2[match(sum_data_percent$sub_sess, sum_data_percent_outlier2$sub_sess),]$outlier2_lower
sum_data_percent$outlier2 <- ifelse(sum_data_percent$percent_used > sum_data_percent$outlier2_upper | sum_data_percent$percent_used < sum_data_percent$outlier2_lower, TRUE, FALSE )
View(sum_data_percent)
View(sum_data_percent)
sum_data_percent_outlier2 <- aggregate(percent_used ~ sub_sess , data = daytime_eeg, FUN = mean)
sum_data_percent_outlier2_sd <- aggregate(percent_used ~ sub_sess , data = daytime_eeg, FUN = sd)
sum_data_percent_outlier2$outlier2_upper <- sum_data_percent_outlier2$percent_used + (sum_data_percent_outlier2_sd$percent_used*2)
sum_data_percent_outlier2$outlier2_lower <- sum_data_percent_outlier2$percent_used - (sum_data_percent_outlier2_sd$percent_used*2)
View(sum_data_percent_outlier2)
daytime_eeg2 <- subset(daytime_eeg, !is.na(ValueNorm1))
sum_data_percent <- aggregate(percent_used ~ subject + color + session + light_level + trial + session + date +sub_sess , data = daytime_eeg, FUN = mean)
sum_data_percent$outlier1_upper <- sum_data_percent_outlier1[match(sum_data_percent$subject, sum_data_percent_outlier1$subject),]$outlier1_upper
sum_data_percent$outlier1_lower <- sum_data_percent_outlier1[match(sum_data_percent$subject, sum_data_percent_outlier1$subject),]$outlier1_lower
sum_data_percent$outlier1 <- ifelse(sum_data_percent$percent_used > sum_data_percent$outlier1_upper | sum_data_percent$percent_used < sum_data_percent$outlier1_lower, TRUE, FALSE )
sum_data_percent$outlier2_upper <- sum_data_percent_outlier2[match(sum_data_percent$sub_sess, sum_data_percent_outlier2$sub_sess),]$outlier2_upper
sum_data_percent$outlier2_lower <- sum_data_percent_outlier2[match(sum_data_percent$sub_sess, sum_data_percent_outlier2$sub_sess),]$outlier2_lower
sum_data_percent$outlier2 <- ifelse(sum_data_percent$percent_used > sum_data_percent$outlier2_upper | sum_data_percent$percent_used < sum_data_percent$outlier2_lower, TRUE, FALSE )
View(sum_data_percent)
sum_data_percent$percent_used > sum_data_percent$outlier2_upper | sum_data_percent$percent_used < sum_data_percent$outlier2_lower
sum_data_percent <- sum_data_percent %>%
group_by(subject) %>%
mutate(sub_percent_mean = mean(percent_used))
sum_data_percent <- sum_data_percent %>%
group_by(subject) %>%
mutate(sub_percent_2sdmean = mean(percent_used)-(sd(percent_used)*2))
sum_data_percent$outlier <-ifelse(sum_data_percent$percent_used < sum_data_percent$sub_percent_2sdmean, TRUE, FALSE)
sum_data_percent <- sum_data_percent %>%
group_by(subject) %>%
mutate(sub_percent_30mean = mean(percent_used)*.3)
sum_data_percent$outlier2 <-ifelse(sum_data_percent$percent_used < sum_data_percent$sub_percent_30mean, TRUE, FALSE)
sum_data_percent$light_level <- factor(sum_data_percent$light_level, levels = c("high", "medium", "low", "dim"))
sum_data_percent_blue <- subset(sum_data_percent, color == "b")
sum_data_percent_red <- subset(sum_data_percent, color == "r")
sum_data_percent4 <- subset(sum_data_percent, percent_used >= .30)
sum_data_percent_blue3 <- subset(sum_data_percent4, color == "b")
sum_data_percent_red3 <- subset(sum_data_percent4, color == "r")
sum_data_percent4$sub_char <- paste(sum_data_percent4$subject, sum_data_percent4$light_level, sep = "_")
missing_after_filter <-  data.frame(table(sum_data_percent4$sub_char))
blue_outllier_limit <- mean(sum_data_percent_blue$percent_used) - sd(sum_data_percent_blue$percent_used)*2
red_outllier_limit <- mean(sum_data_percent_red$percent_used) - sd(sum_data_percent_red$percent_used)*2
sub_data_percent_blue <- aggregate(percent_used ~ subject, data = sum_data_percent_blue, FUN = mean)
sub_data_percent_red <- aggregate(percent_used ~ subject, data = sum_data_percent_red, FUN = mean)
##Subject 117 was the only subject whose mean percent_used was below the outlier limit
##Therefore was excluded from analysis
gg <- ggplot(sum_data_percent_blue, aes(x =trial, y= percent_used, fill = light_level, colour = light_level))+
geom_point() +
geom_line() +
geom_hline(yintercept = .30) +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
theme(legend.position="none") +
coord_cartesian(ylim=c(0, 1)) +
scale_colour_manual(values=c("blue1", "blue2", "blue4", "#999999"))+
labs(y = "Percentage of unfiltered data (%)")
gg
sum_data_percent_blue
View(sub_data_percent_blue)
View(sub_data_percent_red)
View(sum_data_percent)
ggplot(sum_data_percent_blue, aes(x =trial, y= percent_used, fill = light_level, colour = light_level, size = outlier1))+
geom_point() +
geom_line() +
geom_hline(yintercept = .30) +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
theme(legend.position="none") +
coord_cartesian(ylim=c(0, 1)) +
scale_colour_manual(values=c("blue1", "blue2", "blue4", "#999999"))+
labs(y = "Percentage of unfiltered data (%)")
ggplot(sum_data_percent_blue, aes(x =trial, y= percent_used, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier1)) +
geom_line() +
geom_hline(yintercept = .30) +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)
ggplot(sum_data_percent_blue, aes(x =trial, y= percent_used, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier1)) +
geom_line() +
geom_hline(yintercept = .30) +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
coord_cartesian(ylim=c(0, 1)) +
scale_colour_manual(values=c("blue1", "blue2", "blue4", "#999999"))+
labs(y = "Percentage of unfiltered data (%)")
theta_outlier1 <- aggregate(Value ~ subject , data = theta, FUN = mean)
library(readxl)
library(ggplot2)
daytime_eeg <- read_excel("//root/projects/EEG-Daytime-ONR-2017/processed-data/completed/180sec_threshold_100/longFormatTableNorm1NormD_2018_08_13_13_04.xlsx")
colnames(daytime_eeg)[6] <- "light_level"
daytime_eeg$light_level <- ifelse(daytime_eeg$light_level =="d", "dim", ifelse(daytime_eeg$light_level =="m", "medium", ifelse(daytime_eeg$light_level =="l", "low","high" )) )
###Theta
theta <- daytime_eeg[daytime_eeg$Channel == "theta",]
outlierUpper <- mean(theta$Value) + sd(theta$Value)*2
outlierLower <- mean(theta$Value) - sd(theta$Value)*2
theta$outlier <- ifelse(theta$Value > outlierUpper | theta$Value < outlierLower, TRUE, FALSE)
theta$sub_char <- paste(theta$subject, theta$light_level, sep = "_")
theta_outlier1 <- aggregate(Value ~ subject , data = theta, FUN = mean)
theta_outlier1_sd <- aggregate(Value ~ subject , data = theta, FUN = sd)
theta_outlier1$outlier1_upper <- theta_outlier1$Value + (theta_outlier1_sd$Value*2)
theta_outlier1$outlier1_lower <- theta_outlier1$Value - (theta_outlier1_sd$Value*2)
theta_outlier2 <- aggregate(Value ~ sub_char , data = theta, FUN = mean)
theta_outlier2_sd <- aggregate(Value ~ sub_char , data = theta, FUN = sd)
theta_outlier2$outlier2_upper <- theta_outlier2$Value + (theta_outlier2_sd$Value*2)
theta_outlier2$outlier2_lower <- theta_outlier2$Value - (theta_outlier2_sd$Value*2)
theta_outlier2
theta$outlier1_upper <- theta_outlier1[match(theta$subject, theta_outlier1$subject),]$outlier1_upper
theta$outlier1_lower <- theta_outlier1[match(theta$subject, theta_outlier1$subject),]$outlier1_lower
theta$outlier1 <- ifelse(theta$Value > theta$outlier1_upper | theta$Value < theta$outlier1_lower, TRUE, FALSE )
theta$outlier2_upper <- theta_outlier2[match(theta$sub_char, theta_outlier2$sub_char),]$outlier2_upper
theta$outlier2_lower <- theta_outlier2[match(theta$sub_char, theta_outlier2$sub_char),]$outlier2_lower
theta$outlier2 <- ifelse(theta$Value > theta$outlier2_upper | theta$Value < theta$outlier2_lower, TRUE, FALSE )
ggplot(theta, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier1)) +
geom_line() +
geom_hline(yintercept = outlierUpper) +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "Theta")
ggplot(theta, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier2)) +
geom_line() +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "Theta")
theta$outlier2
###A-Theta
atheta <- daytime_eeg[daytime_eeg$Channel == "atheta",]
outlierUpper <- mean(atheta$Value) + sd(atheta$Value)*2
outlierLower <- mean(atheta$Value) - sd(atheta$Value)*2
atheta$outlier <- ifelse(atheta$Value > outlierUpper | atheta$Value < outlierLower, TRUE, FALSE)
atheta$sub_char <- paste(atheta$subject, atheta$light_level, sep = "_")
####individual outlier
atheta_outlier1 <- aggregate(Value ~ subject , data = atheta, FUN = mean)
atheta_outlier1_sd <- aggregate(Value ~ subject , data = atheta, FUN = sd)
atheta_outlier1$outlier1_upper <- atheta_outlier1$Value + (atheta_outlier1_sd$Value*2)
atheta_outlier1$outlier1_lower <- atheta_outlier1$Value - (atheta_outlier1_sd$Value*2)
atheta_outlier2 <- aggregate(Value ~ sub_char , data = atheta, FUN = mean)
atheta_outlier2_sd <- aggregate(Value ~ sub_char , data = atheta, FUN = sd)
atheta_outlier2$outlier2_upper <- atheta_outlier2$Value + (atheta_outlier2_sd$Value*2)
atheta_outlier2$outlier2_lower <- atheta_outlier2$Value - (atheta_outlier2_sd$Value*2)
atheta$outlier1_upper <- atheta_outlier1[match(atheta$subject, atheta_outlier1$subject),]$outlier1_upper
atheta$outlier1_lower <- atheta_outlier1[match(atheta$subject, atheta_outlier1$subject),]$outlier1_lower
atheta$outlier1 <- ifelse(atheta$Value > atheta$outlier1_upper | atheta$Value < atheta$outlier1_lower, TRUE, FALSE )
atheta$outlier2_upper <- atheta_outlier2[match(atheta$sub_char, atheta_outlier2$sub_char),]$outlier2_upper
atheta$outlier2_lower <- atheta_outlier2[match(atheta$sub_char, atheta_outlier2$sub_char),]$outlier2_lower
atheta$outlier2 <- ifelse(atheta$Value > atheta$outlier2_upper | atheta$Value < atheta$outlier2_lower, TRUE, FALSE )
ggplot(atheta, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier1)) +
geom_line() +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "atheta")
ggplot(atheta, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier2)) +
geom_line() +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "atheta")
###Alpha
alpha <- daytime_eeg[daytime_eeg$Channel == "alpha",]
outlierUpper <- mean(alpha$Value) + sd(alpha$Value)*2
outlierLower <- mean(alpha$Value) - sd(alpha$Value)*2
alpha$outlier <- ifelse(alpha$Value > outlierUpper | alpha$Value < outlierLower, TRUE, FALSE)
alpha$sub_char <- paste(alpha$subject, alpha$light_level, sep = "_")
####individual outlier
alpha_outlier1 <- aggregate(Value ~ subject , data = alpha, FUN = mean)
alpha_outlier1_sd <- aggregate(Value ~ subject , data = alpha, FUN = sd)
alpha_outlier1$outlier1_upper <- alpha_outlier1$Value + (alpha_outlier1_sd$Value*2)
alpha_outlier1$outlier1_lower <- alpha_outlier1$Value - (alpha_outlier1_sd$Value*2)
alpha_outlier2 <- aggregate(Value ~ sub_char , data = alpha, FUN = mean)
alpha_outlier2_sd <- aggregate(Value ~ sub_char , data = alpha, FUN = sd)
alpha_outlier2$outlier2_upper <- alpha_outlier2$Value + (alpha_outlier2_sd$Value*2)
alpha_outlier2$outlier2_lower <- alpha_outlier2$Value - (alpha_outlier2_sd$Value*2)
alpha$outlier1_upper <- alpha_outlier1[match(alpha$subject, alpha_outlier1$subject),]$outlier1_upper
alpha$outlier1_lower <- alpha_outlier1[match(alpha$subject, alpha_outlier1$subject),]$outlier1_lower
alpha$outlier1 <- ifelse(alpha$Value > alpha$outlier1_upper | alpha$Value < alpha$outlier1_lower, TRUE, FALSE )
alpha$outlier2_upper <- alpha_outlier2[match(alpha$sub_char, alpha_outlier2$sub_char),]$outlier2_upper
alpha$outlier2_lower <- alpha_outlier2[match(alpha$sub_char, alpha_outlier2$sub_char),]$outlier2_lower
alpha$outlier2 <- ifelse(alpha$Value > alpha$outlier2_upper | alpha$Value < alpha$outlier2_lower, TRUE, FALSE )
ggplot(alpha, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier1)) +
geom_line() +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "alpha")
ggplot(alpha, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier2)) +
geom_line() +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "alpha")
###Beta
beta <- daytime_eeg[daytime_eeg$Channel == "beta",]
outlierUpper <- mean(beta$Value) + sd(beta$Value)*2
outlierLower <- mean(beta$Value) - sd(beta$Value)*2
beta$outlier <- ifelse(beta$Value > outlierUpper | beta$Value < outlierLower, TRUE, FALSE)
beta$sub_char <- paste(beta$subject, beta$light_level, sep = "_")
####individual outlier
beta_outlier1 <- aggregate(Value ~ subject , data = beta, FUN = mean)
beta_outlier1_sd <- aggregate(Value ~ subject , data = beta, FUN = sd)
beta_outlier1$outlier1_upper <- beta_outlier1$Value + (beta_outlier1_sd$Value*2)
beta_outlier1$outlier1_lower <- beta_outlier1$Value - (beta_outlier1_sd$Value*2)
beta_outlier2 <- aggregate(Value ~ sub_char , data = beta, FUN = mean)
beta_outlier2_sd <- aggregate(Value ~ sub_char , data = beta, FUN = sd)
beta_outlier2$outlier2_upper <- beta_outlier2$Value + (beta_outlier2_sd$Value*2)
beta_outlier2$outlier2_lower <- beta_outlier2$Value - (beta_outlier2_sd$Value*2)
beta$outlier1_upper <- beta_outlier1[match(beta$subject, beta_outlier1$subject),]$outlier1_upper
beta$outlier1_lower <- beta_outlier1[match(beta$subject, beta_outlier1$subject),]$outlier1_lower
beta$outlier1 <- ifelse(beta$Value > beta$outlier1_upper | beta$Value < beta$outlier1_lower, TRUE, FALSE )
beta$outlier2_upper <- beta_outlier2[match(beta$sub_char, beta_outlier2$sub_char),]$outlier2_upper
beta$outlier2_lower <- beta_outlier2[match(beta$sub_char, beta_outlier2$sub_char),]$outlier2_lower
beta$outlier2 <- ifelse(beta$Value > beta$outlier2_upper | beta$Value < beta$outlier2_lower, TRUE, FALSE )
ggplot(beta, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier1)) +
geom_line() +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "beta")
ggplot(beta, aes(x =trial, y= Value, fill = light_level, colour = light_level))+
geom_point(aes(size = outlier2)) +
geom_line() +
#geom_hline(yintercept = blue_outllier_limit) +
facet_grid(. ~ subject)+
labs(y = "beta")
source("C:/Users/laksm/Documents/GitHub/ONR-Spectral-Sensitivity-Function-/EEG-LMEM-functions.R")
library(ggsignif)
library(readr)
library(Rmisc)
library(ggplot2)
library(dplyr)
library(reshape2)
library(readxl)
#library(ReporteRs) <-- not available for R version 3.5.1
library(reportr)
library(magrittr)
##updated data set (October 2018)
daytime_eeg <- read_excel("//root/projects/EEG-Daytime-ONR-2017/processed-data/completed/180sec_threshold_100/longFormatTableNorm1NormD_2018_08_13_13_04.xlsx")
colnames(daytime_eeg)[6] <- "light_level"
daytime_eeg$light_level <- factor(daytime_eeg$light_level, levels = c("h", "m", "l", "d"))
daytime_eeg$Channel <- factor(daytime_eeg$Channel, levels = c("theta", "atheta", "alpha", "halpha", "beta", "hbeta"))
daytime_eeg$subject <- as.factor(daytime_eeg$subject)
daytime_eeg$color <- as.factor(daytime_eeg$color)
daytime_eeg$Channel <- as.factor(daytime_eeg$Channel)
daytime_eeg$trial <- as.factor(daytime_eeg$trial)
daytime_eeg <- daytime_eeg[daytime_eeg$trial != 1,]
mixed_model1_dataSave <- function(data, UseCompleteOnly, specifier){
data <- subset(data, !is.na(ValueNorm1) & is.finite(ValueNorm1) & trial != 1)
dir <- "//ROOT/projects/EEG-Daytime-ONR-2017/SUMMARYDATA/"
if(UseCompleteOnly){
numSubs <- data.frame(table(data$Subject))
numSubs <- numSubs[numSubs$Freq == 48,]
data <- data[data$Subject %in% numSubs$Var1, ]
}
numSubs2 <- data.frame(table(data$subject, data$light_level))
numSubs000 <- data.frame(table(data$subject, data$light_level, data$trial))
numSubs2$Freq <- ifelse(numSubs2$Freq == 12, "COMPLETED",
ifelse(numSubs2$Freq == 0, "MISSING", numSubs2$Freq))
numSubs000 <- data.frame(table(data$subject, data$color))
numSubs000$Freq <- ifelse(numSubs000$Freq == 48, "COMPLETED",  "MISSING")
theta <- subset(data, Channel == "theta" & daynight == "d" & trial != 1)
atheta <- subset(data, Channel == "atheta"  & daynight == "d" & trial != 1 )
alpha <- subset(data, Channel == "alpha"   & daynight == "d" & trial != 1)
halpha <- subset(data, Channel == "halpha"  & daynight == "d" & trial != 1)
hbeta <- subset(data, Channel == "hbeta"  & daynight == "d" & trial != 1)
beta <- subset(data, Channel == "beta" & daynight == "d" & trial != 1)
theta_subs1 <- aggregate(ValueNorm1 ~ subject*color*light_level, data= theta, FUN =  mean)
atheta_subs1 <- aggregate(ValueNorm1 ~ subject*color*light_level, data= atheta, FUN =  mean)
alpha_subs1 <- aggregate(ValueNorm1 ~ subject*color*light_level, data= alpha, FUN =  mean)
beta_subs1 <- aggregate(ValueNorm1 ~ subject*color*light_level, data= beta, FUN =  mean)
theta_sum1 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level"), data = theta_subs1)
atheta_sum1 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level"), data = atheta_subs1)
alpha_sum1 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level"), data = alpha_subs1)
beta_sum1 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level"), data = beta_subs1)
write.csv(theta_sum1, paste(dir, "model1-theta-light_level--", specifier, ".csv"), row.names = FALSE)
write.csv(atheta_sum1, paste(dir, "model1-alphaTheta-light_level--", specifier, ".csv"), row.names = FALSE)
write.csv(alpha_sum1, paste(dir, "model1-alpha-light_level--", specifier, ".csv"), row.names = FALSE)
write.csv(beta_sum1, paste(dir, "model1-beta-light_level--", specifier, ".csv"), row.names = FALSE)
theta_subs2 <- aggregate(ValueNorm1 ~ subject*color*light_level*trial, data= theta, FUN =  mean)
atheta_subs2 <- aggregate(ValueNorm1 ~ subject*color*light_level*trial, data= atheta, FUN =  mean)
alpha_subs2 <- aggregate(ValueNorm1 ~ subject*color*light_level*trial, data= alpha, FUN =  mean)
beta_subs2 <- aggregate(ValueNorm1 ~ subject*color*light_level*trial, data= beta, FUN =  mean)
theta_sum2 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level", "trial"), data = theta_subs2)
atheta_sum2 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level", "trial"), data = atheta_subs2)
alpha_sum2 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level", "trial"), data = alpha_subs2)
beta_sum2 <- summarySE(measurevar = "ValueNorm1", groupvars = c("light_level", "trial"), data = beta_subs2)
write.csv(theta_sum2, paste(dir, "model1-theta-light_levelXTrial--", specifier, ".csv"), row.names = FALSE)
write.csv(atheta_sum2, paste(dir, "model1-alphaTheta-light_levelXTrial--", specifier, ".csv"), row.names = FALSE)
write.csv(alpha_sum2, paste(dir, "model1-alpha-light_levelXTrial--", specifier, ".csv"), row.names = FALSE)
write.csv(beta_sum2, paste(dir, "model1-beta-light_levelXTrial--", specifier, ".csv"), row.names = FALSE)
}
mixed_model1_dataSave(daytime_eeg,  FALSE, "all_data")
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model1_dataSave(daytime_eeg,  FALSE, "all_data")
debugSource('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
View(alpha)
View(halpha)
theta_subs1
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
paste(dir, "model2-theta-light_level--", specifier, ".csv")
specifier
dir
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
model_single_spectrum_dataSave(daytime_eeg, "r", FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "b", FALSE, "all_data")
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model1_dataSave(daytime_eeg,  FALSE, "all_data")
model_list11 <- output_mixed_model2(daytime_eeg, FALSE)
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
print("All data: daytime, specifed to look at light level")
print_mixed_model(model_list10)
print("All data: daytime, specifed to look at spectra")
print_mixed_model(model_list11)
##Looking at each individual spectra
model_list12 <- output_mixed_model_single_spectrum(daytime_eeg,  "r", FALSE)
model_single_spectrum_dataSave(daytime_eeg, "r", FALSE, "all_data")
model_list13 <- output_mixed_model_single_spectrum(daytime_eeg, "b", FALSE)
model_single_spectrum_dataSave(daytime_eeg, "b", FALSE, "all_data")
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model1_dataSave(daytime_eeg,  FALSE, "all_data")
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "r", FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "b", FALSE, "all_data")
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
mixed_model1_dataSave(daytime_eeg,  FALSE, "all_data")
mixed_model2_dataSave(daytime_eeg,  FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "r", FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "b", FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "r", FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "b", FALSE, "all_data")
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/RunLMEM.R', echo=TRUE)
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
model_single_spectrum_dataSave(daytime_eeg, "r", FALSE, "all_data")
model_single_spectrum_dataSave(daytime_eeg, "b", FALSE, "all_data")
View(daytime_eeg)
daytime_eeg_OLD <- read_excel("//root/projects/EEG-Daytime-ONR-2017/processed-data/month1&2/cropped-longFormatTable_2018_04_11_14_53.xlsx",
col_types = c("text", "text", "numeric",
"text", "text", "numeric", "date",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(daytime_eeg_OLD)
daytime_eeg_OLD$light_level <- factor(daytime_eeg_OLD$light_level, levels = c("h", "m", "l", "d"))
View(daytime_eeg)
daytime_eeg$sub_cond_session <-  paste(daytime_eeg$subject, daytime_eeg$light_level, daytime_eeg$session, sep = "_")
View(daytime_eeg)
View(daytime_eeg)
daytime_eeg_crop1 <- subset(daytime_eeg, subject != 202 & sub_cond_session != "214_l_3" & sub_cond_session != "224_l_4" & sub_cond_session != "216_l_3")
View(daytime_eeg_crop1)
model_list10 <- output_mixed_model1(daytime_eeg_crop1,  FALSE) ## what are these functions for?
model_list10
model_list11 <- output_mixed_model2(daytime_eeg_crop1, FALSE)
print("All data: daytime, specifed to look at light level")
print_mixed_model(model_list10)
print("All data: daytime, specifed to look at spectra")
print_mixed_model(model_list11)
model_list10 <- output_mixed_model1(daytime_eeg_crop1,  FALSE) ## what are these functions for?
model_list11 <- output_mixed_model2(daytime_eeg_crop1, FALSE)
print("All data: daytime, specifed to look at light level")
print_mixed_model(model_list10)
print("All data: daytime, specifed to look at spectra")
print_mixed_model(model_list11)
##Looking at each individual spectra
model_list12 <- output_mixed_model_single_spectrum(daytime_eeg_crop1,  "r", FALSE)
model_list13 <- output_mixed_model_single_spectrum(daytime_eeg_crop1, "b", FALSE)
print("Red: daytime 3min")
print_mixed_model(model_list12)
print("Blue: daytime 3min")
print_mixed_model(model_list13)
source("C:/Users/laksm/Documents/GitHub/ONR-Spectral-Sensitivity-Function-/EEG-LMEM-functions.R")
library(ggsignif)
library(readr)
library(Rmisc)
library(ggplot2)
library(dplyr)
library(reshape2)
library(readxl)
#library(ReporteRs) <-- not available for R version 3.5.1
library(reportr)
library(magrittr)
###Daytime
###previous data set
daytime_eeg_OLD <- read_excel("//root/projects/EEG-Daytime-ONR-2017/processed-data/month1&2/cropped-longFormatTable_2018_04_11_14_53.xlsx",
col_types = c("text", "text", "numeric",
"text", "text", "numeric", "date",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
daytime_eeg_OLD$light_level <- factor(daytime_eeg_OLD$light_level, levels = c("h", "m", "l", "d"))
daytime_eeg_OLD$light_level <- ifelse(daytime_eeg_OLD$light_level =="d", "dim", ifelse(daytime_eeg_OLD$light_level =="m", "medium", ifelse(daytime_eeg_OLD$light_level =="l", "low","high" )) )
daytime_eeg_OLD$subject_cond_trial <- paste(daytime_eeg_OLD$subject, daytime_eeg_OLD$light_level, daytime_eeg_OLD$trial, sep = "_")
##updated data set (October 2018)
daytime_eeg <- read_excel("//root/projects/EEG-Daytime-ONR-2017/processed-data/completed/180sec_threshold_100/longFormatTableNorm1NormD_2018_08_13_13_04.xlsx")
colnames(daytime_eeg)[6] <- "light_level"
daytime_eeg$light_level <- factor(daytime_eeg$light_level, levels = c("h", "m", "l", "d"))
daytime_eeg$Channel <- factor(daytime_eeg$Channel, levels = c("theta", "atheta", "alpha", "halpha", "beta", "hbeta"))
daytime_eeg$subject <- as.factor(daytime_eeg$subject)
daytime_eeg$color <- as.factor(daytime_eeg$color)
daytime_eeg$Channel <- as.factor(daytime_eeg$Channel)
daytime_eeg$trial <- as.factor(daytime_eeg$trial)
daytime_eeg <- daytime_eeg[daytime_eeg$trial != 1,]
daytime_eeg$sub_cond_session <-  paste(daytime_eeg$subject, daytime_eeg$light_level, daytime_eeg$session, sep = "_")
###Crop 1: remove data for EEG data issues, NON-COMPLIANCE or problems with light stimulus
## 1. Remove 202 completely for non-complianace
## 2. Remove 214 low - Light level set to 15 lux
## 3. Remove 216 2nd low session, subject did 2 low session
## 4. Remove 224 low- poor EEG data for trial 1
daytime_eeg_crop1 <- subset(daytime_eeg, subject != 202 & sub_cond_session != "214_l_3" & sub_cond_session != "224_l_4" & sub_cond_session != "216_l_3")
#function(data, time, doc, Save, UseCompleteOnly)
model_list10 <- output_mixed_model1(daytime_eeg_crop1,  FALSE) ## what are these functions for?
mixed_model1_dataSave(daytime_eeg_crop1,  FALSE, "all_data")
model_list11 <- output_mixed_model2(daytime_eeg_crop1, FALSE)
mixed_model2_dataSave(daytime_eeg_crop1,  FALSE, "all_data")
print("All data: daytime, specifed to look at light level")
print_mixed_model(model_list10)
print("All data: daytime, specifed to look at spectra")
print_mixed_model(model_list11)
##Looking at each individual spectra
model_list12 <- output_mixed_model_single_spectrum(daytime_eeg_crop1,  "r", FALSE)
model_single_spectrum_dataSave(daytime_eeg_crop1, "r", FALSE, "all_data")
model_list13 <- output_mixed_model_single_spectrum(daytime_eeg_crop1, "b", FALSE)
model_single_spectrum_dataSave(daytime_eeg_crop1, "b", FALSE, "all_data")
print("Red: daytime 3min")
print_mixed_model(model_list12)
print("Blue: daytime 3min")
print_mixed_model(model_list13)
source('//ROOT/projects/EEG-Daytime-ONR-2017/ANALYSIS/EEG/EEG-LMEM-functions.R', echo=TRUE)
library(ggsignif)
library(readr)
library(Rmisc)
library(ggplot2)
library(dplyr)
library(reshape2)
library(readxl)
#library(ReporteRs) <-- not available for R version 3.5.1
library(reportr)
library(magrittr)
###Daytime
###previous data set
daytime_eeg_OLD <- read_excel("//root/projects/EEG-Daytime-ONR-2017/processed-data/month1&2/cropped-longFormatTable_2018_04_11_14_53.xlsx",
col_types = c("text", "text", "numeric",
"text", "text", "numeric", "date",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
daytime_eeg_OLD$light_level <- factor(daytime_eeg_OLD$light_level, levels = c("h", "m", "l", "d"))
daytime_eeg_OLD$light_level <- ifelse(daytime_eeg_OLD$light_level =="d", "dim", ifelse(daytime_eeg_OLD$light_level =="m", "medium", ifelse(daytime_eeg_OLD$light_level =="l", "low","high" )) )
daytime_eeg_OLD$subject_cond_trial <- paste(daytime_eeg_OLD$subject, daytime_eeg_OLD$light_level, daytime_eeg_OLD$trial, sep = "_")
##updated data set (October 2018)
daytime_eeg <- read_excel("//root/projects/EEG-Daytime-ONR-2017/processed-data/completed/180sec_threshold_100/longFormatTableNorm1NormD_2018_08_13_13_04.xlsx")
colnames(daytime_eeg)[6] <- "light_level"
daytime_eeg$light_level <- factor(daytime_eeg$light_level, levels = c("h", "m", "l", "d"))
daytime_eeg$Channel <- factor(daytime_eeg$Channel, levels = c("theta", "atheta", "alpha", "halpha", "beta", "hbeta"))
daytime_eeg$subject <- as.factor(daytime_eeg$subject)
daytime_eeg$color <- as.factor(daytime_eeg$color)
daytime_eeg$Channel <- as.factor(daytime_eeg$Channel)
daytime_eeg$trial <- as.factor(daytime_eeg$trial)
daytime_eeg <- daytime_eeg[daytime_eeg$trial != 1,]
daytime_eeg$sub_cond_session <-  paste(daytime_eeg$subject, daytime_eeg$light_level, daytime_eeg$session, sep = "_")
###Crop 1: remove data for EEG data issues, NON-COMPLIANCE or problems with light stimulus
## 1. Remove 202 completely for non-complianace
## 2. Remove 214 low - Light level set to 15 lux
## 3. Remove 216 2nd low session, subject did 2 low session
## 4. Remove 224 low- poor EEG data for trial 1
daytime_eeg_crop1 <- subset(daytime_eeg, subject != 202 & sub_cond_session != "214_l_3" & sub_cond_session != "224_l_4" & sub_cond_session != "216_l_3")
#function(data, time, doc, Save, UseCompleteOnly)
model_list10 <- output_mixed_model1(daytime_eeg_crop1,  FALSE) ## what are these functions for?
mixed_model1_dataSave(daytime_eeg_crop1,  FALSE, "all_data")
model_list11 <- output_mixed_model2(daytime_eeg_crop1, FALSE)
mixed_model2_dataSave(daytime_eeg_crop1,  FALSE, "all_data")
print("All data: daytime, specifed to look at light level")
print_mixed_model(model_list10)
print("All data: daytime, specifed to look at spectra")
print_mixed_model(model_list11)
##Looking at each individual spectra
model_list12 <- output_mixed_model_single_spectrum(daytime_eeg_crop1,  "r", FALSE)
model_single_spectrum_dataSave(daytime_eeg_crop1, "r", FALSE, "all_data")
model_list13 <- output_mixed_model_single_spectrum(daytime_eeg_crop1, "b", FALSE)
model_single_spectrum_dataSave(daytime_eeg_crop1, "b", FALSE, "all_data")
print("Red: daytime 3min")
print_mixed_model(model_list12)
print("Blue: daytime 3min")
print_mixed_model(model_list13)
